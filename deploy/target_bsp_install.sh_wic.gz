#!/bin/bash -e

blue_underlined_bold_echo()
{
	echo -e "\e[34m\e[4m\e[1m$@\e[0m"
}

blue_bold_echo()
{
	echo -e "\e[34m\e[1m$@\e[0m"
}

red_bold_echo()
{
	echo -e "\e[31m\e[1m$@\e[0m"
}

IMGS_PATH=$(pwd)
WIC_IMAGE=rootfs.wic.gz
BOOTLOADER_RESERVED_SIZE=8
DISPLAY=lvds
PART=p

check_board()
{
	if grep -q "i.MX8MM" /sys/devices/soc0/soc_id; then
		BOARD=imx8mm-var-dart
		DTB_PREFIX=imx8mm-var-dart
		BLOCK=mmcblk2
		BOOTLOADER_OFFSET=33
	elif grep -q "i.MX8MN" /sys/devices/soc0/soc_id; then
		BOARD=imx8mn-var-som
		DTB_PREFIX=imx8mn-var-som
		BLOCK=mmcblk2
		BOOTLOADER_OFFSET=32
	elif grep -q "i.MX8MP" /sys/devices/soc0/soc_id; then
		BOARD=imx8mp-var-dart
		BLOCK=mmcblk2
		BOOTLOADER_OFFSET=32
	elif grep -q "i.MX8QXP" /sys/devices/soc0/soc_id; then
		BOARD=imx8qxp-var-som
		DTB_PREFIX=imx8qxp-var-som-symphony
		BLOCK=mmcblk0
		BOOTLOADER_OFFSET=32
	elif grep -q "i.MX8QM" /sys/devices/soc0/soc_id; then
		BOARD=imx8qm-var-som
		DTB_PREFIX=imx8qm-var-som-symphony
		BLOCK=mmcblk0
		BOOTLOADER_OFFSET=32

		if [[ $DISPLAY != "lvds" && $DISPLAY != "hdmi" && \
		      $DISPLAY != "dp" ]]; then
			red_bold_echo "ERROR: invalid display, should be lvds, hdmi or dp"
			exit 1
		fi
	elif grep -q "i.MX8MQ" /sys/devices/soc0/soc_id; then
		BOARD=imx8mq-var-dart
		DTB_PREFIX=imx8mq-var-dart-dt8mcustomboard
		BLOCK=mmcblk0
		BOOTLOADER_OFFSET=33
		if [[ $DISPLAY != "lvds" && $DISPLAY != "hdmi" && \
		      $DISPLAY != "dp" && $DISPLAY != "lvds-dp" && $DISPLAY != "lvds-hdmi" ]]; then
			red_bold_echo "ERROR: invalid display, should be lvds, hdmi, dp, lvds-dp or lvds-hdmi"
			exit 1
		fi
	else
		red_bold_echo "ERROR: Unsupported board"
		exit 1
	fi


	if [[ ! -b /dev/${BLOCK} ]] ; then
		red_bold_echo "ERROR: Can't find eMMC device (/dev/${BLOCK})."
		red_bold_echo "Please verify you are using the correct options for your SOM."
		exit 1
	fi
}

check_wic_images()
{
	if [[ ! -f $IMGS_PATH/$WIC_IMAGE ]] ; then
		red_bold_echo "ERROR: \"$IMGS_PATH/$WIC_IMAGE\" does not exist"
		exit 1
	fi
}

delete_emmc()
{
	echo
	blue_underlined_bold_echo "Deleting current partitions"

	umount /dev/${BLOCK}${PART}* 2>/dev/null || true

	for ((i=1; i<=16; i++)); do
		if [[ -e /dev/${BLOCK}${PART}${i} ]]; then
			dd if=/dev/zero of=/dev/${BLOCK}${PART}${i} bs=1M count=1 2>/dev/null || true
		fi
	done
	sync

	dd if=/dev/zero of=/dev/${BLOCK} bs=1M count=${BOOTLOADER_RESERVED_SIZE}

	sync; sleep 1
}

install_wic_to_emmc()
{
	echo
	blue_underlined_bold_echo "Installing wic"
	if [ -f ${IMGS_PATH}/${WIC_IMAGE} ]
	then
		blue_bold_echo "Burning ${IMGS_PATH}/${WIC_IMAGE}"
		gunzip -c ${IMGS_PATH}/${WIC_IMAGE} | dd of=/dev/${BLOCK} bs=1M conv=fsync status=progress
       		sync
	else
		red_bold_echo "Failed Burning !! image ${IMGS_PATH}/${WIC_IMAGE} not found"
	fi
}

stop_udev()
{
	if [ -f /lib/systemd/system/systemd-udevd.service ]; then
		systemctl -q stop \
			systemd-udevd-kernel.socket \
			systemd-udevd-control.socket \
			systemd-udevd
	fi
}

start_udev()
{
	if [ -f /lib/systemd/system/systemd-udevd.service ]; then
		systemctl -q start \
			systemd-udevd-kernel.socket \
			systemd-udevd-control.socket \
			systemd-udevd
	fi
}

usage()
{
	echo
	echo "This script installs Yocto on the SOM's internal storage device"
	echo
	echo " Usage: $(basename $0) <option>"
	echo
	echo " options:"
	echo " -h                           show help message"
	if grep -q "i.MX8QM" /sys/devices/soc0/soc_id; then
		echo " -d <lvds|hdmi|dp>            set display type, default is lvds"
	elif grep -q "i.MX8MQ" /sys/devices/soc0/soc_id; then
		echo " -d <lvds|hdmi|dp|lvds-dp|lvds-hdmi>  set display type, default is lvds"
	fi
	echo " -u                           create two rootfs partitions (for swUpdate double-copy)."
	echo
}

finish()
{
	echo
	blue_bold_echo "Yocto installed successfully"
	exit 0
}

#################################################
#           Execution starts here               #
#################################################

if [[ $EUID != 0 ]] ; then
	red_bold_echo "This script must be run with super-user privileges"
	exit 1
fi

blue_underlined_bold_echo "*** Variscite MX8 Yocto eMMC Recovery ***"
echo

swupdate=0

while getopts d:hu OPTION;
do
	case $OPTION in
	d)
		DISPLAY=$OPTARG
		;;
	h)
		usage
		exit 0
		;;
	u)
		swupdate=1
		;;
	*)
		usage
		exit 1
		;;
	esac
done

check_board

printf "Board: "
blue_bold_echo $BOARD

printf "Installing to internal storage device: (from wic)"
blue_bold_echo eMMC

check_wic_images
stop_udev
delete_emmc
install_wic_to_emmc
start_udev
finish
